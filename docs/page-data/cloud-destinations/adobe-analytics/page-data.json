{"componentChunkName":"component---src-templates-page-js","path":"/cloud-destinations/adobe-analytics/","result":{"data":{"markdownRemark":{"frontmatter":{"path":"/cloud-destinations/adobe-analytics/","navText":"Adobe Analytics","seoTitle":null}}},"pageContext":{"html":"\n    <section>\n      \n    <div class=\"toc\">\n      <div class=\"toc-sticky\">\n        <h6>On this Page:</h6>\n        <ul><li><a href=\"#what-is-adobe-analytics-and-how-does-it-work\">What is Adobe Analytics and how does it work?</a></li> <li><a href=\"#why-send-data-to-adobe-analytics-using-metarouter\">Why send data to Adobe Analytics using MetaRouter?</a></li> <li><a href=\"#getting-started-with-adobe-analytics-and-metarouter\">Getting Started with Adobe Analytics and MetaRouter</a></li></ul>\n      </div>\n    </div>\n  \n      <html><head></head><body><h1 id=\"adobe-analytics\" style=\"position:relative;\" data-tags=\"cloud,destinations\"><a href=\"#\" aria-label=\"adobe analytics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Adobe Analytics</h1>\n<p>MetaRouter makes it easy to send your data to Adobe Analytics. Once you follow the steps below, your data will be routed through our platform and pushed to Adobe Analytics in the appropriate format.</p>\n<h2 id=\"what-is-adobe-analytics-and-how-does-it-work\" style=\"position:relative;\"><a href=\"#what-is-adobe-analytics-and-how-does-it-work\" aria-label=\"what is adobe analytics and how does it work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>What is Adobe Analytics and how does it work?</h2>\n<p>Adobe Analytics is a solution for applying real-time analytics and detailed segmentation across marketing channels.\nA request is made to the web server when a visitor comes to your site. Your site&apos;s web server sends the page code information, and the page displays in the browser. When the page loads the JavaScript code will run and send an image request to the Adobe server, passing the variables, metrics, and page data that were defined in your implementation.</p>\n<h2 id=\"why-send-data-to-adobe-analytics-using-metarouter\" style=\"position:relative;\"><a href=\"#why-send-data-to-adobe-analytics-using-metarouter\" aria-label=\"why send data to adobe analytics using metarouter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Why send data to Adobe Analytics using MetaRouter?</h2>\n<p>With MetaRouter, you can use Adobe Analytics without having to install their JavaScript library on every page of your site. We also eliminate the need to write custom code to track user event data. Once your Adobe Analytics is routed through MetaRouter, our platform translates page views and events into corresponding Adobe Analytics events.</p>\n<h2 id=\"getting-started-with-adobe-analytics-and-metarouter\" style=\"position:relative;\"><a href=\"#getting-started-with-adobe-analytics-and-metarouter\" aria-label=\"getting started with adobe analytics and metarouter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Getting Started with Adobe Analytics and MetaRouter</h2>\n<h3 id=\"initialization\" style=\"position:relative;\"><a href=\"#initialization\" aria-label=\"initialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Initialization</h3>\n<p>When using Adobe Analytics through Analytics.js, we will check if you already have global properties such as <code class=\"language-text\">window.s_account</code> or any properties on the <code class=\"language-text\">window.s</code> object and use them. In the absence of any of these values, we will fallback on the <strong>Report Suite ID</strong>, <strong>Tracking Server URL</strong>, and <strong>Tracking Server Secure URL</strong>(optional) you have defined in the destination settings inside MetaRouter.</p>\n<p>Once these required properties are set, we will load <code class=\"language-text\">appmeasurement.js</code> version 1.6.</p>\n<h3 id=\"marketing-cloud-visitor-id-service\" style=\"position:relative;\"><a href=\"#marketing-cloud-visitor-id-service\" aria-label=\"marketing cloud visitor id service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Marketing Cloud Visitor ID Service</h3>\n<p>You can use Adobe&#x2019;s Marketing Cloud Visitor ID Service, in witch case you will need to provide MetaRouter with your <strong>Marketing Cloud Organization ID</strong> - in the advanced options inside MetaRouter.</p>\n<p>Our Analytics.js destination will load their <code class=\"language-text\">visitorAPI.js</code> library, but will only initialize it if you provide your Marketing Cloud Organization ID - we will set <code class=\"language-text\">window.s.visitor</code> with the return value from <code class=\"language-text\">window.Visitor.getInstance(&lt;Your Marketing Cloud Org Id&gt;)</code>. See <a href=\"https://marketing.adobe.com/resources/help/en_US/mcvid/mcvid-setup-analytics.html\">their documentation</a> for more information.</p>\n<p><strong>Note:</strong> In the same script as <code class=\"language-text\">appmeasurement.js</code> we also load <code class=\"language-text\">visitorAPI.js</code> - Adobe Analytics requires synchronous execution of this two scripts. Using the visitor API is <strong>optional</strong> but for those who do, we make it available on the page.</p>\n<h3 id=\"list-variables\" style=\"position:relative;\"><a href=\"#list-variables\" aria-label=\"list variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>List Variables</h3>\n<p>You can map your MetaRouter properties in your settings to any of your three list variables - <code class=\"language-text\">props</code>, <code class=\"language-text\">eVar</code>, <code class=\"language-text\">hVar</code>. You can either send the property value as a comma delimited string (ie. <code class=\"language-text\">&apos;john,charlie,alfred&apos;</code>) or as an Array (<code class=\"language-text\">[&apos;john&apos;, &apos;charlie&apos;, &apos;alfred&apos;]</code>). If the provided data will be an Array, we will join it into a comma delimited string and then sending to Adobe!</p>\n<h3 id=\"sending-data-to-adobe-analytics\" style=\"position:relative;\"><a href=\"#sending-data-to-adobe-analytics\" aria-label=\"sending data to adobe analytics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Sending Data to Adobe Analytics</h3>\n<p>Our recommendation is to create both a MetaRouter and Adobe Analytics tracking plan before attempting to send any events/properties to Adobe, since you&#x2019;ll have to map all your MetaRouter events to Adobe <code class=\"language-text\">events</code> and MetaRouter properties to Adobe <code class=\"language-text\">eVars</code> or <code class=\"language-text\">props</code> in both the MetaRouter settings UI and your Adobe Mobile Services dashboard.</p>\n<h3 id=\"page\" style=\"position:relative;\"><a href=\"#page\" aria-label=\"page permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Page</h3>\n<p>By default, the MetaRouter snippet includes an empty <code class=\"language-text\">page()</code> call. When <code class=\"language-text\">page()</code> is called, here&apos;s the things that will happen:</p>\n<ol>\n<li>\n<p>Set <code class=\"language-text\">window.s.pageName</code> to the <code class=\"language-text\">name</code> of the page call was. By default, the MetaRouter <code class=\"language-text\">.page()</code> call will set <code class=\"language-text\">window.s.pageName</code> to be the passed argument. Since the default <code class=\"language-text\">page()</code> call has no arguments, <code class=\"language-text\">window.s.pageName</code> will be set as <code class=\"language-text\">undefined</code>. For calls like <code class=\"language-text\">page(&apos;Homepage&apos;)</code>, the <code class=\"language-text\">window.s.pageName</code> property will be set to the String passed, in this example, &quot;Homepage&quot;.</p>\n<p><strong>Note:</strong> For an empty <code class=\"language-text\">page()</code> call, Adobe Analytics will fallback by default to displaying the <code class=\"language-text\">url</code> as the name of the page.</p>\n</li>\n<li><code class=\"language-text\">window.s.events</code> will also be set to the passed argument of the <code class=\"language-text\">page(&lt;name&gt;)</code> call.</li>\n<li>\n<p>Check if page call is associated with a <code class=\"language-text\">userId</code> from a previous <code class=\"language-text\">.identify()</code> call. If so, we will set the <code class=\"language-text\">userId</code>as <code class=\"language-text\">window.s.visitorID</code>.</p>\n<p><strong>IMPORTANT</strong>: Note that Adobe Analytics <a href=\"https://marketing.adobe.com/resources/help/en_US/sc/implement/timestamps-overview.html\">does not support setting vistorID</a> if you are sending a timestamped hit. So we will only set <code class=\"language-text\">window.s.visitorID</code> if your <strong>Timestamp Option</strong> is <code class=\"language-text\">disabled</code> and a <code class=\"language-text\">userId</code>exists on the event.</p>\n</li>\n<li>\n<p>Check for some common properties such as the following and set them on the <code class=\"language-text\">window.s</code> object:</p>\n<ul>\n<li><code class=\"language-text\">channel</code></li>\n<li><code class=\"language-text\">campaign</code></li>\n<li><code class=\"language-text\">state</code></li>\n<li><code class=\"language-text\">zip</code></li>\n</ul>\n<p>In the first step, we will follow the properties you sent with the <code class=\"language-text\">page()</code> call. An example <code class=\"language-text\">page()</code> call in order to set the four properties above should be:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">analytics<span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n channel<span class=\"token operator\">:</span> <span class=\"token string\">&apos;Phones&apos;</span><span class=\"token punctuation\">,</span>\n campaign<span class=\"token operator\">:</span> <span class=\"token string\">&apos;1234&apos;</span><span class=\"token punctuation\">,</span>\n state<span class=\"token operator\">:</span> <span class=\"token string\">&apos;OH&apos;</span><span class=\"token punctuation\">,</span>\n zip<span class=\"token operator\">:</span> <span class=\"token string\">&apos;06145&apos;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>For the <code class=\"language-text\">campaign</code> property, we will first check for <code class=\"language-text\">context.campaign.name</code> and only after we will check within the properties sent.</p>\n<p>Alternatively, if you already set any of these four properties on your existing Adobe Analytics instance on the page (<code class=\"language-text\">window.s.channel</code>, <code class=\"language-text\">window.s.campaign</code>, etc.), we will fallback on that as the default value. This will allow you to easily set default values for all your web pages but you&apos;ll also be able to change them programmatically per page if needed.</p>\n</li>\n<li>If your <strong>Timestamp Option</strong> is either <strong>Timestamp Enabled</strong> or <strong>Timestamp Optional</strong>, we will attach the <code class=\"language-text\">timestamp</code> to <code class=\"language-text\">window.s.timestamp</code>. Please make sure that this setting is inline with your <em>actual</em> timestamp setting inside Adobe Analytics for the same Report Suite ID.</li>\n<li>\n<p>Check if any of the page call&#x2019;s properties have been mapped to any custom Adobe Analytics variables such as <code class=\"language-text\">eVar</code>, <code class=\"language-text\">props</code>, and <code class=\"language-text\">hVar</code>.</p>\n<p>Given the mapping setting below:</p>\n<p><a href=\"https://cdn.metarouter.io/web/img/docs/content/adobe-analytics-page-mapping-settings.png\" target=\"_mr\"><img src=\"https://cdn.metarouter.io/web/img/docs/content/adobe-analytics-page-mapping-settings.png\" alt=\"adobe-analytics-page-mapping-settings\"></a></p>\n<p>If you call the following <code class=\"language-text\">page()</code> call:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">analytics<span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n browser<span class=\"token operator\">:</span> <span class=\"token string\">&apos;chrome&apos;</span><span class=\"token punctuation\">,</span>\n searchTerm<span class=\"token operator\">:</span> <span class=\"token string\">&apos;blue shirt&apos;</span><span class=\"token punctuation\">,</span>\n section<span class=\"token operator\">:</span> <span class=\"token string\">&apos;shirts&apos;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We will set the following properties on the <code class=\"language-text\">window.s</code> object:</p>\n<ul>\n<li><code class=\"language-text\">window.s.prop1 = &apos;chrome&apos;</code></li>\n<li><code class=\"language-text\">window.s.eVar7 = &apos;blue shirts&apos;</code></li>\n<li><code class=\"language-text\">window.s.eVar3</code> will be set to the <code class=\"language-text\">url</code> of the page where the call was made (<code class=\"language-text\">.page()</code> will automatically set a <code class=\"language-text\">url</code> property)</li>\n<li><code class=\"language-text\">window.s.hier1 = &apos;shirts&apos;</code></li>\n</ul>\n</li>\n<li>Finally we will send the pageview request to Adobe Analytics by using <code class=\"language-text\">window.s.t()</code>.</li>\n</ol>\n<h3 id=\"track\" style=\"position:relative;\"><a href=\"#track\" aria-label=\"track permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Track</h3>\n<p>Event tracking for Adobe Analytics through MetaRouter requires you to predefine the <code class=\"language-text\">events</code> you want to collect.</p>\n<p>In <strong>both</strong> Adobe Analytics and MetaRouter destination settings UI, you must predefine a list of <code class=\"language-text\">.track()</code> events that you want to send and which properties you want to send as custom variables.</p>\n<p>This means that you <strong>must</strong> map each event and property to a corresponding Adobe Analytics <code class=\"language-text\">event</code>, <code class=\"language-text\">prop</code>, or <code class=\"language-text\">eVar</code>.</p>\n<p>Here is an example of how you might map the custom variables:</p>\n<p><a href=\"https://cdn.metarouter.io/web/img/docs/content/adobe-analytics-track-mapping-settings.png\" target=\"_mr\"><img src=\"https://cdn.metarouter.io/web/img/docs/content/adobe-analytics-track-mapping-settings.png\" alt=\"adobe-analytics-track-mapping-settings\"></a></p>\n<p>Given the settings above, if you make a sample <code class=\"language-text\">.track()</code> call below:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">analytics<span class=\"token punctuation\">.</span><span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token string\">&apos;Watched Video&apos;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  plan<span class=\"token operator\">:</span> <span class=\"token string\">&apos;free&apos;</span><span class=\"token punctuation\">,</span>\n  videoName<span class=\"token operator\">:</span> <span class=\"token string\">&apos;The Uptick Rule&apos;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The following will happen:</p>\n<ol>\n<li>Check if the MetaRouter event name, <code class=\"language-text\">&apos;Watched Video&apos;</code>, is mapped in your MetaRouter settings. If it is, set <code class=\"language-text\">window.s.linkTrackEvents</code> and <code class=\"language-text\">window.s.events</code> to its corresponding Adobe Analytics event name, <code class=\"language-text\">&apos;event1&apos;</code>. If no matching event name is found in the MetaRouter settings, do nothing and abort.</li>\n<li>Attach <code class=\"language-text\">timestamp</code> to <code class=\"language-text\">window.s.timestamp</code> if your <strong>Timestamp Option</strong> setting inside MetaRouter is either <strong>Timestamp Enabled</strong> or <strong>Timestamp Optional</strong>.</li>\n<li>Update common variables such as <code class=\"language-text\">channel</code>, <code class=\"language-text\">campaign</code>, <code class=\"language-text\">state</code>, <code class=\"language-text\">zip</code> if their corresponding properties were included in the event or on your <code class=\"language-text\">window.s</code> object.</li>\n<li>Check if the MetaRouter event name, <code class=\"language-text\">Watched Video</code> is mapped to an <code class=\"language-text\">eVar</code>. Since it is in the example case above, set <code class=\"language-text\">window.s.eVar3</code> as <code class=\"language-text\">&apos;Watched Video&apos;</code>.</li>\n<li>Check if any of the properties are mapped to either a <code class=\"language-text\">prop</code>, <code class=\"language-text\">eVar</code>, or <code class=\"language-text\">hVar</code>. Thus for the example above, set <code class=\"language-text\">window.s.prop1</code> as <code class=\"language-text\">&apos;free&apos;</code> and <code class=\"language-text\">window.s.eVar4</code> as <code class=\"language-text\">&apos;The Uptick Rule&apos;</code>.</li>\n<li>\n<p>Automatically try to set <code class=\"language-text\">window.s.pageName</code> to the following values, in order of precedence:</p>\n<ul>\n<li><code class=\"language-text\">properties.pageName</code> (for backward compatibility)</li>\n<li><code class=\"language-text\">options.pageName</code> (if you already have <code class=\"language-text\">window.s.pageName</code> defined on the web page)</li>\n<li><code class=\"language-text\">context.page.title</code> (which is automatically tracked by our Analytics.js library)</li>\n</ul>\n<p>Since <code class=\"language-text\">context.page.title</code> will always be populated, at the very minimum <code class=\"language-text\">window.s.pageName</code> will always be set to the value inside your <code class=\"language-text\">&lt;title&gt;</code> tag of the page where the <code class=\"language-text\">.track()</code> call was fired.</p>\n</li>\n<li>Set <code class=\"language-text\">window.s.linkTrackVars</code>, which is a joined string of variable keys delimited by a comma. The example above would produce a value of <code class=\"language-text\">&apos;eVar3,events,pageName,timestamp,eVar3,prop1&apos;</code>. This tells Adobe Analytics which properties on the <code class=\"language-text\">window.s</code> object they should send along with this event.</li>\n<li>\n<p>Finally, we will fire the request to Adobe Analytics using <code class=\"language-text\">window.s.tl(true, &apos;o&apos;, &apos;Watched Video&apos;)</code></p>\n<p><strong>Note:</strong> <code class=\"language-text\">true</code> sets a <code class=\"language-text\">500ms</code> delay to give your browser time to flush the event. It also signifies to Adobe that this event is something other than a <code class=\"language-text\">href</code> link. The <code class=\"language-text\">&apos;o&apos;</code> stands for <code class=\"language-text\">&apos;Other&apos;</code>, as opposed to <code class=\"language-text\">&apos;d&apos;</code> for <code class=\"language-text\">&apos;Downloads&apos;</code>and <code class=\"language-text\">&apos;e&apos;</code> for <code class=\"language-text\">&apos;Exit Links&apos;</code>. The final parameter is the link name you will see in reports inside Adobe Analytics.</p>\n</li>\n</ol>\n<h3 id=\"ecommerce-events\" style=\"position:relative;\"><a href=\"#ecommerce-events\" aria-label=\"ecommerce events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg></a>Ecommerce Events</h3>\n<p>The Adobe Analytics destination works with our standard Ecommerce API.</p>\n<p>The following mapping between semantic ecommerce events for MetaRouter and Adobe Analytics are supported:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">MetaRouter Event Name</th>\n<th align=\"left\">Adobe Analytics Event Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Product Viewed</td>\n<td align=\"left\"><code class=\"language-text\">prodView</code></td>\n</tr>\n<tr>\n<td align=\"left\">Product List Viewed</td>\n<td align=\"left\"><code class=\"language-text\">prodView</code></td>\n</tr>\n<tr>\n<td align=\"left\">Product Added</td>\n<td align=\"left\"><code class=\"language-text\">scAdd</code></td>\n</tr>\n<tr>\n<td align=\"left\">Product Removed</td>\n<td align=\"left\"><code class=\"language-text\">scRemove</code></td>\n</tr>\n<tr>\n<td align=\"left\">Cart Viewed</td>\n<td align=\"left\"><code class=\"language-text\">scView</code></td>\n</tr>\n<tr>\n<td align=\"left\">Checkout Started</td>\n<td align=\"left\"><code class=\"language-text\">scCheckout</code></td>\n</tr>\n<tr>\n<td align=\"left\">Order Completed</td>\n<td align=\"left\"><code class=\"language-text\">purchase</code></td>\n</tr>\n</tbody>\n</table>\n<p>For any of the above ecommerce events, data is sent similarly to <code class=\"language-text\">.track()</code> events. The difference here is that you do <strong>NOT</strong> need to predefine these MetaRouter event names in the MetaRouter settings. The above ecommerce events will automatically be mapped and sent to Adobe Analytics.</p>\n<p><strong>Note:</strong> Ecommerce relevant properties such as <code class=\"language-text\">orderId</code>, <code class=\"language-text\">products</code> will be sent automatically. However, if you want to attach custom properties to Adobe&#x2019;s <code class=\"language-text\">eVar</code>, <code class=\"language-text\">prop</code> or <code class=\"language-text\">hVar</code>, you need to predefine them in the MetaRouter settings. (just the properties, no need to map the event names, unless you want the event name to be set to an <code class=\"language-text\">eVar</code>).</p>\n<p>For all ecommerce events listed, we will send product description data to Adobe Analytics.</p>\n<p>Given the sample <code class=\"language-text\">Order Completed</code> MetaRouter event:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">analytics<span class=\"token punctuation\">.</span><span class=\"token function\">track</span><span class=\"token punctuation\">(</span><span class=\"token string\">&apos;Order Completed&apos;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  orderId<span class=\"token operator\">:</span> <span class=\"token string\">&apos;50314b8e9bcf000000000000&apos;</span><span class=\"token punctuation\">,</span>\n  total<span class=\"token operator\">:</span> <span class=\"token number\">30.0</span><span class=\"token punctuation\">,</span>\n  revenue<span class=\"token operator\">:</span> <span class=\"token number\">25.0</span><span class=\"token punctuation\">,</span>\n  shipping<span class=\"token operator\">:</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span>\n  tax<span class=\"token operator\">:</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span>\n  discount<span class=\"token operator\">:</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span>\n  coupon<span class=\"token operator\">:</span> <span class=\"token string\">&apos;15years&apos;</span><span class=\"token punctuation\">,</span>\n  currency<span class=\"token operator\">:</span> <span class=\"token string\">&apos;USD&apos;</span><span class=\"token punctuation\">,</span>\n  products<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">&apos;507f1f77bcf86cd799439011&apos;</span><span class=\"token punctuation\">,</span>\n      sku<span class=\"token operator\">:</span> <span class=\"token string\">&apos;45790-32&apos;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&apos;Monopoly: 3rd Edition&apos;</span><span class=\"token punctuation\">,</span>\n      price<span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      category<span class=\"token operator\">:</span> <span class=\"token string\">&apos;Games&apos;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">&apos;6123ef823abf6fe926481024&apos;</span><span class=\"token punctuation\">,</span>\n      sku<span class=\"token operator\">:</span> <span class=\"token string\">&apos;13281-19&apos;</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">&apos;Go Pro&apos;</span><span class=\"token punctuation\">,</span>\n      price<span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      category<span class=\"token operator\">:</span> <span class=\"token string\">&apos;Electronics&apos;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>\n<p>Set <code class=\"language-text\">window.s.products</code> with the product description string - a semi-colon delimited string per product which is additionally delimited by commas if you have multiple products. The string format per product is <code class=\"language-text\">[category];[name];[quantity];[total]</code>. Total is calculated by multiplying price and quantity for each product.</p>\n<p><strong>Note:</strong> you can optionally choose whether to map the <code class=\"language-text\">name</code>, <code class=\"language-text\">sku</code>, or <code class=\"language-text\">id</code> for each of item in the <code class=\"language-text\">products</code> array. So one could alternatively send product descriptions with <code class=\"language-text\">[category];[sku];[quantity];[total]</code> or <code class=\"language-text\">[category];[id];[quantity];[total]</code>. Select the mapping via the <strong>Product Identifier</strong> dropdown under Advanced Options in your Adobe Analytics MetaRouter settings. The default identifier is set to <code class=\"language-text\">name</code>.</p>\n<p>Thus the above example would set <code class=\"language-text\">window.s.products</code> to <code class=\"language-text\">&apos;Games;Monopoly: 3rd Edition;1;19,Electronics;Go Pro;2;99&apos;</code>.</p>\n<p>The default fallback values for <code class=\"language-text\">quantity</code> and <code class=\"language-text\">price</code> is <code class=\"language-text\">1</code> and <code class=\"language-text\">0</code>, respectively.</p>\n<p><strong>Important</strong>: If any of the items in the <code class=\"language-text\">products</code> array have property values that include commas or semi-colons, you may have data issues since Adobe Analytics uses them as delimiters.</p>\n</li>\n<li>Update common variables such as <code class=\"language-text\">channel</code>, <code class=\"language-text\">campaign</code>, <code class=\"language-text\">state</code>, <code class=\"language-text\">zip</code>, and <code class=\"language-text\">pageName</code>. These values will be set if they exist at the property level, your existing Adobe Analytics variables already attached on the <code class=\"language-text\">window.s</code>object, or <code class=\"language-text\">context.page.title</code> (for <code class=\"language-text\">pageName</code>).</li>\n<li>Set <code class=\"language-text\">window.s.events</code> with the corresponding Adobe Analytics naming convention. The above example would set this as <code class=\"language-text\">&apos;purchase&apos;</code>.</li>\n<li>Check if the event name is mapped as an <code class=\"language-text\">eVar</code> and if so, set it on the <code class=\"language-text\">window.s</code>.</li>\n<li>Check if any other top level properties have been mapped to a custom variable in the MetaRouter settings such as <code class=\"language-text\">eVar</code>, <code class=\"language-text\">prop</code>, and <code class=\"language-text\">hVar</code>. If so, set them on the <code class=\"language-text\">window.s</code>.</li>\n<li>\n<p>Set <code class=\"language-text\">window.s.purchaseID</code> and <code class=\"language-text\">window.s.transactionID</code> as the <code class=\"language-text\">orderId</code>, which for the example above would be <code class=\"language-text\">&apos;50314b8e9bcf000000000000&apos;</code>. <strong>Note</strong> that this is only for <code class=\"language-text\">Order Completed</code> events.</p>\n<p>The default <code class=\"language-text\">currencyCode</code> we set upon pageload is <code class=\"language-text\">USD</code>. We will check if you have passed any other currency in your event by checking <code class=\"language-text\">properties.currency</code>.</p>\n<p><strong>Important</strong>: If you&#x2019;d like to collect <code class=\"language-text\">transactionID</code>, make sure to enable the transactionID storage setting inside your <a href=\"https://marketing.adobe.com/resources/help/en_US/sc/implement/transactionID.html\">Reporting Suite</a>!</p>\n</li>\n<li>Attach the <code class=\"language-text\">timestamp</code> as <code class=\"language-text\">window.s.timestamp</code> if your <strong>Timestamp Option</strong> is <strong>Timestamp Enabled</strong> or <strong>Timestamp Optional</strong>.</li>\n<li>Set <code class=\"language-text\">window.s.linkTrackEvents</code> to the Adobe Analytics event name, which would be <code class=\"language-text\">purchase</code> for the above example.</li>\n<li>Set <code class=\"language-text\">window.s.linkTrackVars</code> which is a string of keys we want Adobe Analytics to read from the <code class=\"language-text\">window.s</code>object when the request is sent. For the example above, the value of <code class=\"language-text\">linkTrackVars</code> would be set as <code class=\"language-text\">&apos;pageName,events,products,purchaseID,transactionID,timestamp&apos;</code>.</li>\n<li>Finally, we will fire the request to Adobe Analytics using <code class=\"language-text\">window.s.tl(true, &apos;o&apos;, &apos;Order Completed&apos;)</code>.</li>\n</ol></body></html>\n    </section>\n    <div class=\"section-border\"></div>\n  "}}}